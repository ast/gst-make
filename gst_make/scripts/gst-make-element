#!/usr/bin/env python3

import argparse
import jinja2.exceptions
from jinja2 import Environment, PackageLoader
from gst_make import script_path, GstReplace
import os
from sys import exit
from os import path

def main():
	parser = argparse.ArgumentParser(description='Create a gstreamer element')
	parser.add_argument("--prefix", help="prefix, default 'gst'", type=str, default="gst")
	parser.add_argument("--dump-source", help="print source instead of writing to file", action='store_true')
	parser.add_argument("--dump-header", help="print header instead of writing to file", action='store_true')
	parser.add_argument("name", help="element name", type=str)
	parser.add_argument("baseclass", help="base class", type=str)
	args = parser.parse_args()

	# template environment
	env = Environment(
	    loader = PackageLoader('gst_make', 'templates/elements-jinja2'),
	    trim_blocks=True,
	    lstrip_blocks=True)

	r = GstReplace(args.prefix, args.name)
	# load templates
	try:
		h_tmpl = env.get_template("{}.h".format(args.baseclass))
		c_tmpl = env.get_template("{}.c".format(args.baseclass))
	except jinja2.exceptions.TemplateNotFound as e:
		print("# template {} not found".format(e))
		exit(1)

	# dump?
	if args.dump_header:
		print(h_tmpl.render(r=r))
		exit(0)

	if args.dump_source:
		print(c_tmpl.render(r=r))
		exit(0)

	# output files
	h_tmpl.stream(r=r).dump("{}.h".format(r.gstreplace))
	c_tmpl.stream(r=r).dump("{}.c".format(r.gstreplace))

	print("# created {0}.h and {0}.c".format(r.gstreplace))
	print("# dont forget to:\n")
	print("#include \"{}.h\"\n".format(r.gstreplace))
	print("if(!gst_element_register (plugin, \"{}\", GST_RANK_NONE, {}))".format(r.replace, r.GST_TYPE_REPLACE))
	print("  return FALSE;")

if __name__ == '__main__':
    main()
