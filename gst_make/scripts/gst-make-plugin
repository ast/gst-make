#!/usr/bin/env python3

import argparse
from jinja2 import Environment, PackageLoader
from gst_make import GstReplace
import os
from os import path

def main():
	parser = argparse.ArgumentParser(description='Create a gstreamer plugin')
	parser.add_argument("--prefix", help="prefix, default 'gst'", type=str, default="gst")
	parser.add_argument("name", help="plugin name", type=str)
	args = parser.parse_args()

	# helper class to generate appropriate names
	r = GstReplace(args.prefix, args.name)
	# don't do anything if path exists
	if path.exists(path.join(os.getcwd(), r.name)):
		print("{} exists".format(r.name))
		exit(1)
	# create plugin directory
	os.mkdir(r.name)
	# setup template loader
	env = Environment(
	    loader = PackageLoader('gst_make', 'templates/plugin-jinja2'),
	    trim_blocks=True,
	    lstrip_blocks=True)
	# templates
	gstplugin_c_tmpl   = env.get_template('gstplugin.c')
	meson_build_tmpl = env.get_template('meson.build')
	# render to files
	gstplugin_c_tmpl.stream(r=r).dump(path.join(r.name, "{}.c".format(r.gstreplace)))
	meson_build_tmpl.stream(r=r).dump(path.join(r.name, "meson.build"))

	print("# created {}".format(r.name))
	print("echo 'subdir('{}')' >> meson.build".format(r.name))

if __name__ == '__main__':
    main()
