#!/usr/bin/env python3

import argparse
from jinja2 import Environment, PackageLoader
from gst_make import GstReplace
import os
from os import path
from sys import exit


def main():
	parser = argparse.ArgumentParser(description='Create meson based gstreamer project')
	parser.add_argument("--prefix", help="prefix, default 'gst'", type=str, default="gst")
	parser.add_argument("--version", help="version, default '0.0.1'", type=str, default="1.0.0")
	parser.add_argument("name", help="project name", type=str)
	args = parser.parse_args()

	# helper class to generate appropriate names
	r = GstReplace(args.prefix, args.name)
	# don't do anything if path exists
	if path.exists(path.join(os.getcwd(), r.gst_project_replace)):
		print("{} exists".format(r.gst_project_replace))
		exit(1)
	# create projects directories
	os.makedirs(path.join(r.gst_project_replace, "gst"))
	os.makedirs(path.join(r.gst_project_replace, "gst-libs"))
	os.makedirs(path.join(r.gst_project_replace, "tests"))
	# setup template loader
	env = Environment(
	    loader = PackageLoader('gst_make', 'templates/project-jinja2'),
	    trim_blocks=True,
	    lstrip_blocks=True)
	# root templates
	gitignore_tmpl   = env.get_template('gitignore')
	meson_build_tmpl = env.get_template('meson.build')
	readme_md_tmpl      = env.get_template('README.md')
	# gst/ templates
	gst_meson_build_tmpl = env.get_template('gst/meson.build')
	# tests/ templates
	tests_gsttest_c_tmpl = env.get_template('tests/gsttest.c')
	tests_meson_build_tmpl = env.get_template('tests/meson.build')

	# root
	meson_build_tmpl.stream(r=r, version=args.version).dump(path.join(r.gst_project_replace, "meson.build"))
	gitignore_tmpl.stream().dump(path.join(r.gst_project_replace, ".gitignore"))
	readme_md_tmpl.stream(r=r).dump(path.join(r.gst_project_replace, "README.md"))
	# gst
	gst_meson_build_tmpl.stream().dump(path.join(r.gst_project_replace, "gst", "meson.build"))
	# tests
	tests_gsttest_c_tmpl.stream().dump(path.join(r.gst_project_replace, "tests", "gsttest.c"))
	tests_meson_build_tmpl.stream().dump(path.join(r.gst_project_replace, "tests", "meson.build"))
	# done
	print("created {}".format(r.gst_project_replace))

if __name__ == '__main__':
    main()
